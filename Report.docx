Here is the improved and formatted report similar to the README layout:

---

# Multimedia Group Chat Application Final Report

## 1. Scheduling and Synchronization Strategies

### Scheduling

The server employs a Thread Pool to manage concurrent client connections efficiently.

**Benefits of the Thread Pool:**
- Reduces overhead from frequent thread creation and destruction for each client.
- Enhances scalability by handling multiple client requests (text, audio, and video) concurrently without significant performance degradation.

**Task Prioritization:**
To ensure real-time communication, multimedia packet types are prioritized:
1. **Video and Audio Packets**: Processed first to maintain minimal latency and high-quality real-time communication.
2. **Text Packets**: Handled with lower priority as they are not time-sensitive.

### Synchronization

Synchronization mechanisms are implemented to protect shared resources and ensure thread safety:
- **Mutexes (std::mutex)**: Used for critical sections involving shared resources such as:
  - Chat logs.
  - Packet queues.
- **Condition Variables (std::condition_variable)**: Implemented for a producer-consumer model to buffer video and audio streams effectively.

**Producer-Consumer Model Example Code:**

```cpp
std::queue<Packet> packetQueue;
std::mutex queueMutex;
std::condition_variable queueCV;

void processPackets() {
    while (true) {
        std::unique_lock<std::mutex> lock(queueMutex);
        queueCV.wait(lock, [] { return !packetQueue.empty(); });

        Packet packet = packetQueue.front();
        packetQueue.pop();
        lock.unlock();

        // Process the packet
        processPacket(packet);
    }
}
```

In this model:
- **Producer threads** add multimedia packets to the queue.
- **Consumer threads** retrieve and process the packets efficiently.

## 2. Protocol Implementation

The application uses a custom lightweight protocol to handle three distinct packet types: Text, Audio, and Video.

### Packet Structure

```cpp
struct Packet {
    PacketType type;     // TEXT, AUDIO, or VIDEO
    char metadata[64];   // Metadata header (e.g., "MSG|USER_ID|DEST_ID")
    char data[1024];     // Payload (text/audio/video data)
};
```

**Examples of Headers:**

| Packet Type | Metadata Example |
| ----------- | ---------------- |
| Text        | `MSG             |
| Audio       | `AUDIO           |
| Video       | `VIDEO           |

### Implementation Steps

**Client-Side:**
1. Captures data (text, audio, or video).
2. Wraps the data into the Packet structure.
3. Sends the packet to the server.

**Server-Side:**
1. Receives packets from multiple clients.
2. Decodes packet types and handles them:
   - **Text**: Logs messages to the server console.
   - **Audio**: Confirms receipt and logs.
   - **Video**: Decodes and displays frames using OpenCV.

## 3. Challenges Faced and Solutions

| Challenge                    | Solution                                                      |
| ---------------------------- | ------------------------------------------------------------- |
| Real-time video transmission | Used OpenCVâ€™s `imencode` to compress frames before transmission. |
| Concurrent client handling   | Implemented a Thread Pool for efficient client management.    |
| Synchronizing shared resources | Leveraged mutexes and condition variables to ensure thread safety. |
| Multimedia packet handling   | Designed a lightweight protocol with distinct packet types and metadata. |
| Managing audio/video buffer sizes | Buffered streams with a producer-consumer queue for smooth processing. |

## 4. Documented Protocol Design

**Field Descriptions**

| Field       | Description                                   | Example           |
| ----------- | --------------------------------------------- | ----------------- |
| PacketType  | Identifies the type of data (TEXT, AUDIO, VIDEO). | PacketType::TEXT  |
| metadata    | Contains headers for routing and control info. | `MSG              |
| data        | Holds the payload (text, audio, or video).     | "Hello World!"    |

## 5. Screenshots of Demonstration

The following screenshots illustrate key functionalities of the application:
1. **Server Console**:
   - Logging text messages.
   - Displaying packet metadata and confirming receipt of audio/video packets.
2. **Client Console**:
   - Capturing and sending text/audio/video data.
3. **Video Stream Display**:
   - The server decoding and displaying real-time video frames using OpenCV.
4. **Wireshark Packet Capture**:
   - Demonstrates the custom protocol with packet headers and payloads for text, audio, and video streams.

## 6. Performance Benchmarks

### Scalability Testing

The server was tested with 10 clients concurrently sending text, audio, and video streams.

| Metric         | Value           |
| -------------- | --------------- |
| CPU Usage      | ~40-50% (10 clients) |
| Memory Usage   | ~500 MB         |
| Average Latency| ~20-30 ms       |

**Resource Usage:**
- **Thread Pool Size**: 4 threads.
- **Video Resolution**: 640x480 pixels to balance quality and performance.

### Stress Testing
- Simulated real-world conditions by running multiple client instances.
- **Result**: The server remained stable and responsive under load.

## 7. Final Notes

The Multimedia Group Chat Application successfully implements the following core features:
1. **Text Chat**: Messages are routed and logged efficiently.
2. **Audio Transmission**: Handled using FFmpeg for encoding and decoding.
3. **Video Streaming**: Frames are streamed in real time using OpenCV.
4. **Thread Safety**: Resources are synchronized using mutexes and condition variables.
5. **Efficient Resource Management**: A thread pool and producer-consumer model ensure smooth operation.

This project demonstrates robust handling of multimedia data while maintaining performance, scalability, and synchronization integrity.

